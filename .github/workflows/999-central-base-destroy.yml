name: 999 Base Destruction

on:
  workflow_dispatch:

env:
  WORKSPACE: "base"
  FOLDERNAME: "01base"
  REGION: "eu-west-1"
  TERRAFORM_VERSION: "1.3.7"
  PROJECT: "brighton-cloud-demos"

jobs:
  base_destruction:
    name: base_destruction
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
      issues: write     # This is required for creating the issue for approval
    steps:
    - uses: actions/checkout@v3

    - name: Base Destruction - Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: ${{ env.REGION }}
        role-to-assume: ${{ secrets.ROLE_NAME }}
        role-session-name: "terraform-${{ env.WORKSPACE }}-destroy"

    - name: Base Destruction - Install Terraform        
      run: |
        tf_version=$TERRAFORM_VERSION
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Verify Terraform version
      run: terraform --version

    - name: Base Destruction - Terraform init
      run: terraform -chdir=$FOLDERNAME init -input=false

    - name: Base Destruction - Terraform workspace
      run: terraform -chdir=$FOLDERNAME workspace select $WORKSPACE || terraform -chdir=$FOLDERNAME workspace new $WORKSPACE

    - name: Base Destruction - Update code to move state from backend and allow destruction of base resources
      run: |
        sed -i 's/force_destroy = false/force_destroy = true/g' $FOLDERNAME/main.tf
        sed -i 's/prevent_destroy = true/prevent_destroy = false/g' $FOLDERNAME/main.tf
        sed -i 's/backend "s3" {/#; backend "s3" {/g' $FOLDERNAME/main.tf
        sed -i 's/encrypt        = true/#; encrypt        = true/g' $FOLDERNAME/main.tf
        sed -i 's/bucket         = "$PROJECT-terraform-state-storage"/#; bucket         = "$PROJECT-terraform-state-storage"/g' $FOLDERNAME/main.tf
        sed -i 's/dynamodb_table = "$PROJECT-terraform-state-lock"/#; dynamodb_table = "$PROJECT-terraform-state-lock"/g' $FOLDERNAME/main.tf
        sed -i 's/key            = "$PROJECT\/base.tfstate"/#; key            = "$PROJECT\/base.tfstate"/g' $FOLDERNAME/main.tf
        sed -i 's/region         = "$REGION"/#; region         = "$REGION"/g' $FOLDERNAME/main.tf
        sed -i 's/}##/#; }##/g' $FOLDERNAME/main.tf
        sleep 10

    - name: Base Destruction - Terraform migrate backend
      run: terraform -chdir=$FOLDERNAME init -migrate-state -force-copy

    - name: Base Destruction - Terraform plan destroy
      run: terraform -chdir=$FOLDERNAME plan -destroy -input=false

    - name: Base Destruction - Confirm destroy
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: securebubble-code
        minimum-approvals: 1

    - name: Base Destruction - Terraform apply destroy
      run: terraform -chdir=$FOLDERNAME destroy -auto-approve -input=false

    - name: Base Destruction - Update code to set variables back to default
      run: |
        sed -i 's/prevent_destroy = false/prevent_destroy = true/g' $FOLDERNAME/main.tf
        sleep 10

    - name: Base Destruction - Commit files
      run: |
        git config --local user.name $GITHUB_ACCOUNT
        find . -iname "main.tf" -exec git add '{}' \;
        find . -iname "variables.tf" -exec git add '{}' \;
        git commit -m "Updating the main.tf after base destruction"
        git push

